name: Diffused Texture Addon Release

on:
  push:
    branches: [ master, v0-redesign ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (optional; falls back to blender_manifest.toml)'
        required: false
        default: ""

permissions:
  contents: write

jobs:

  # 1) Lint
  lint:
    name: Ruff lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            pyproject.toml

      - name: Install lint deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          pip install ruff

      - name: Ruff check
        run: ruff check . --output-format=github

  # # 2) Tests
  # test:
  #   name: Pytest
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
  #         cache: 'pip'
  #         cache-dependency-path: |
  #           requirements-dev.txt
  #           pyproject.toml

  #     - name: Install test deps
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install pytest; fi
  #         # If your tests import the package, this helps (won't fail the job if not a buildable package)
  #         pip install -e . || true

  #     - name: Run pytest
  #       run: |
  #         set -e
  #         pytest -q || rc=$?
  #         if [ "${rc:-0}" -eq 5 ]; then
  #           echo "No tests collected. Skipping."
  #           exit 0
  #         else
  #           exit "${rc:-0}"
  #         fi

  wheels:
    name: Collect wheels (Linux + Windows, CUDA 11.8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Prepare wheelhouse
        run: |
          rm -rf wheels
          mkdir -p wheels

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Download Linux wheels (CUDA 11.8)
        env:
          PIP_NO_CACHE_DIR: "1"
        run: |
          python -m pip download \
            --only-binary=:all: \
            -r requirements-cuda118.txt \
            --dest wheels \
            --extra-index-url https://download.pytorch.org/whl/cu118

      - name: Download Windows wheels (CUDA 11.8)
        env:
          PIP_NO_CACHE_DIR: "1"
        run: |
          python -m pip download \
            --only-binary=:all: \
            -r requirements-cuda118.txt \
            --dest wheels \
            --platform win_amd64 \
            --python-version 311 \
            --implementation cp \
            --abi cp311 \
            --extra-index-url https://download.pytorch.org/whl/cu118

      - name: Update manifest wheels list
        run: python scripts/update_manifest.py blender_manifest.toml wheels

      # Optional: persist the updated manifest in a manual run
      - name: Commit manifest change (manual runs only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          if ! git diff --quiet blender_manifest.toml; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add blender_manifest.toml
            git commit -m "CI: update wheels list in blender_manifest.toml"
          fi

      - name: Upload wheels artifact (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheels

  build:
    name: Build addon zip
    needs: wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels artifact
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: wheels

      - name: Stage clean build dir
        run: |
          rm -rf dist/addon
          mkdir -p dist/addon
          rsync -a --delete \
            --exclude='.git/' --exclude='.github/' --exclude='__pycache__/' \
            --exclude='.vscode/' --exclude='.ruff_cache/' --exclude='.pytest_cache/' \
            --exclude='documentation/' --exclude='tests/' --exclude='images/' \
            --exclude='scratchbook/' --exclude='*.md' --exclude='LICENSE' \
            --exclude='NOTICE' --exclude='Dockerfile' --exclude='pyproject.toml' \
            --exclude='requirements.txt' --exclude='requirements-dev.txt' \
            --exclude='wheels_cuda118/' --exclude='wheels_dev/' --exclude='wheels-dev/' \
            ./ dist/addon/

      - name: Build addon
        uses: blenderkit/blender-addon-build@main
        with:
          name: diffusedtexture-addon
          do-checkout: 'false'
          build-location: 'dist/addon'
          # Keep wheels/, exclude caches and old wheel dirs
          exclude-files: ".git"   # irrelevant now; staged dir is already clean


  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Read version from blender_manifest.toml
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "REL_VER=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            VER=$(python3 -c 'import tomllib; print(tomllib.load(open("blender_manifest.toml","rb"))["version"])')
            echo "REL_VER=$VER" >> $GITHUB_ENV
          fi
          echo "Determined version: $REL_VER"
      - name: Compute release vars
        shell: bash
        run: |
          ARTIFACT_NAME="diffusedtexture-addon"
          RELEASE_NAME="DiffusedTextureAddon"
          RELEASE_STAGE="gold"   # or alpha/beta/rc
          if [ "$RELEASE_STAGE" != "gold" ]; then SUFFIX="-$RELEASE_STAGE"; else SUFFIX=""; fi
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_SUFFIX=$SUFFIX" >> $GITHUB_ENV
          mkdir -p out

      - name: Download build artifact (v4)
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: out

      # If the build artifact is already a .zip, rename it; otherwise, zip the contents.
      - name: Pack (or rename) release zip
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          zips=(out/*.zip)
          if [ ${#zips[@]} -eq 1 ]; then
            mv "${zips[0]}" "out/${ARTIFACT_NAME}-v${REL_VER}${RELEASE_SUFFIX}.zip"
          else
            (cd out && zip -r "${ARTIFACT_NAME}-v${REL_VER}${RELEASE_SUFFIX}.zip" .)
          fi
          ls -la out

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          name: ${{ env.RELEASE_NAME }} v${{ env.REL_VER }}${{ env.RELEASE_SUFFIX }}
          tag_name: v${{ env.REL_VER }}
          prerelease: ${{ env.RELEASE_SUFFIX != '' }}
          files: out/${{ env.ARTIFACT_NAME }}-v${{ env.REL_VER }}${{ env.RELEASE_SUFFIX }}.zip

