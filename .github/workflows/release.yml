name: Diffused Texture Addon Release

on:
  push:
    branches: [ master, v0-redesign ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (optional; falls back to blender_manifest.toml)'
        required: false
        default: ""

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.11'

jobs:

  # 1) Lint
  lint:
    name: Ruff lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            pyproject.toml

      - name: Install lint deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          pip install ruff

      - name: Ruff check
        run: ruff check . --output-format=github

  # # 2) Tests
  # test:
  #   name: Pytest
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
  #         cache: 'pip'
  #         cache-dependency-path: |
  #           requirements-dev.txt
  #           pyproject.toml

  #     - name: Install test deps
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install pytest; fi
  #         # If your tests import the package, this helps (won't fail the job if not a buildable package)
  #         pip install -e . || true

  #     - name: Run pytest
  #       run: |
  #         set -e
  #         pytest -q || rc=$?
  #         if [ "${rc:-0}" -eq 5 ]; then
  #           echo "No tests collected. Skipping."
  #           exit 0
  #         else
  #           exit "${rc:-0}"
  #         fi

  # 3) Collect/Save wheels
  wheels-linux:
    name: Collect Linux wheels (CUDA 11.8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Prep wheelhouse
        run: rm -rf wheels && mkdir -p wheels
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Download Linux wheels
        env: { PIP_NO_CACHE_DIR: "1" }
        run: |
          python -m pip download \
            --only-binary=:all: \
            -r requirements-cuda118.txt \
            --dest wheels \
            --extra-index-url https://download.pytorch.org/whl/cu118
      - name: Upload wheels-linux
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: wheels

  wheels-windows:
    name: Collect Windows wheels (CUDA 11.8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Prep wheelhouse
        run: rm -rf wheels && mkdir -p wheels
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Download Windows wheels
        env: { PIP_NO_CACHE_DIR: "1" }
        run: |
          python -m pip download \
            --only-binary=:all: \
            -r requirements-cuda118.txt \
            --dest wheels \
            --platform win_amd64 \
            --python-version 311 \
            --implementation cp \
            --abi cp311 \
            --extra-index-url https://download.pytorch.org/whl/cu118
      - name: Upload wheels-windows
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: wheels


  # 4) Build the addon zips
  build-linux:
    name: Build addon (Linux package)
    needs: wheels-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels-linux
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
          path: wheels

      # Update the manifest to only include the Linux wheel set
      - name: Update manifest (Linux wheels)
        run: python scripts/update_manifest.py blender_manifest.toml wheels

      - name: Stage clean build dir
        run: |
          rm -rf dist/linux && mkdir -p dist/linux
          rsync -a --delete \
            --exclude='.git/' --exclude='.github/' --exclude='__pycache__/' \
            --exclude='.vscode/' --exclude='.ruff_cache/' --exclude='.pytest_cache/' \
            --exclude='documentation/' --exclude='tests/' --exclude='images/' \
            --exclude='scratchbook/' --exclude='*.md' --exclude='LICENSE' \
            --exclude='NOTICE' --exclude='Dockerfile' --exclude='pyproject.toml' \
            --exclude='requirements.txt' --exclude='requirements-dev.txt' \
            --exclude='wheels_cuda118/' --exclude='wheels_dev/' --exclude='wheels-dev/' \
            ./ dist/linux/

      - name: Build addon (linux)
        uses: blenderkit/blender-addon-build@main
        with:
          name: diffusedtexture-addon-linux
          do-checkout: 'false'
          build-location: 'dist/linux'
          exclude-files: ".git"

  build-windows:
    name: Build addon (Windows package)
    needs: wheels-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels-windows
        uses: actions/download-artifact@v4
        with:
          name: wheels-windows
          path: wheels

      - name: Update manifest (Windows wheels)
        run: python scripts/update_manifest.py blender_manifest.toml wheels

      - name: Stage clean build dir
        run: |
          rm -rf dist/windows && mkdir -p dist/windows
          rsync -a --delete \
            --exclude='.git/' --exclude='.github/' --exclude='__pycache__/' \
            --exclude='.vscode/' --exclude='.ruff_cache/' --exclude='.pytest_cache/' \
            --exclude='documentation/' --exclude='tests/' --exclude='images/' \
            --exclude='scratchbook/' --exclude='*.md' --exclude='LICENSE' \
            --exclude='NOTICE' --exclude='Dockerfile' --exclude='pyproject.toml' \
            --exclude='requirements.txt' --exclude='requirements-dev.txt' \
            --exclude='wheels_cuda118/' --exclude='wheels_dev/' --exclude='wheels-dev/' \
            ./ dist/windows/

      - name: Build addon (windows)
        uses: blenderkit/blender-addon-build@main
        with:
          name: diffusedtexture-addon-windows
          do-checkout: 'false'
          build-location: 'dist/windows'
          exclude-files: ".git"

  release:
    name: Create GitHub Release
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Read version from blender_manifest.toml
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "REL_VER=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            VER=$(python3 -c 'import tomllib; print(tomllib.load(open("blender_manifest.toml","rb"))["version"])')
            echo "REL_VER=$VER" >> $GITHUB_ENV
          fi
          echo "Determined version: $REL_VER"

      - name: Download linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: diffusedtexture-addon-linux
          path: out/linux

      - name: Download windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: diffusedtexture-addon-windows
          path: out/windows

      # Rename artifacts to include version and platform tag
      - name: Rename zips and check sizes
        shell: bash
        run: |
          set -euo pipefail
          LZ=$(ls out/linux/*.zip | head -n1)
          WZ=$(ls out/windows/*.zip | head -n1)
          mv "$LZ" "out/diffusedtexture-addon-linux-v${REL_VER}.zip"
          mv "$WZ" "out/diffusedtexture-addon-windows-v${REL_VER}.zip"
          ls -lh out

          # Hard guard: 2 GiB max per asset on GitHub Releases
          for f in out/*.zip; do
            bytes=$(stat -c%s "$f")
            limit=$((1024*1024*1024*2))
            if [ "$bytes" -ge "$limit" ]; then
              echo "::error file=$f::Asset exceeds 2 GiB ($bytes bytes)."
              exit 1
            fi
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          name: DiffusedTextureAddon v${{ env.REL_VER }}
          tag_name: v${{ env.REL_VER }}
          files: |
            out/diffusedtexture-addon-linux-v${{ env.REL_VER }}.zip
            out/diffusedtexture-addon-windows-v${{ env.REL_VER }}.zip